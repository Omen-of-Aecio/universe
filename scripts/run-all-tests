#! /usr/bin/env bash

# ARG_OPTIONAL_SINGLE([filter],[f],[A regex filter that excludes crates by this name])
# ARG_HELP([Run all tests for all crates])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='fh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_filter=


print_help()
{
	printf '%s\n' "Run all tests for all crates"
	printf 'Usage: %s [-f|--filter <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-f, --filter: A regex filter that excludes crates by this name (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--filter)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_filter="$2"
				shift
				;;
			--filter=*)
				_arg_filter="${_key##--filter=}"
				;;
			-f*)
				_arg_filter="${_key##-f}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -Eeuo pipefail

FILE="$(basename $0)"
DIR="${0%$FILE}"

cd "$DIR.."
DIR="${DIR%/*}"
DIR="${DIR##*/}"

filter="$_arg_filter"

mkdir -p _build/crates

has_failed=0

set +e
RUST_BACKTRACE=1 cargo test --verbose --all --features "${RUN_ON_TRAVIS:-gui-tests}" >& _build/main.test_result
if [ "$?" -ne 0 ]; then
    echo "FAIL: main"
    cat _build/main.test_result
    has_failed=1
else
    echo "PASS: main"
fi
set -e

for library in crates/*; do
    if [ -f "$library"/.test-ignore ]; then
        echo "IGNORE: $library"
        continue
    fi
    if ! [ -z "$filter" ]; then
        if echo "$library" | grep -P "$filter" >& /dev/null; then
            echo "FILTERED: $library"
            continue
        fi
    fi
(
    cd "$library"
    set +e
    RUST_BACKTRACE=1 cargo test --verbose --all >& ../../_build/"$library.test_result"
    if [ "$?" -ne 0 ]; then
        echo "FAIL: $library"
        cat ../../_build/"$library.test_result"
        has_failed=1
    else
        echo "PASS: $library"
    fi
    set -e
)
done

exit "$has_failed"
# ] <-- needed because of Argbash

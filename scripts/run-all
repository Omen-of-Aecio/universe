#! /usr/bin/env bash

# ARG_OPTIONAL_SINGLE([filter],[f],[A regex filter that excludes matches by this name, passed through to all child scripts])
# ARG_HELP([Run all scripts in this directory])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='fh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_filter=


print_help()
{
	printf '%s\n' "Run all scripts in this directory"
	printf 'Usage: %s [-f|--filter <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-f, --filter: A regex filter that excludes scripts by this name (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--filter)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_filter="$2"
				shift
				;;
			--filter=*)
				_arg_filter="${_key##--filter=}"
				;;
			-f*)
				_arg_filter="${_key##-f}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -Eeuo pipefail

FILE="$(basename $0)"
DIR="${0%$FILE}"

cd "$DIR.."
DIR="${DIR%/*}"
DIR="${DIR##*/}"

filter="$_arg_filter"

failures=0
for SCRIPT in "$DIR"/*; do
    if [ "$SCRIPT" = "$DIR/$FILE" ]; then
        continue
    fi
    if ! [ -z "$filter" ]; then
        if echo "$SCRIPT" | grep -P "$filter" >& /dev/null; then
            continue
        fi
    fi
    echo "Running: $SCRIPT"
    set +e
    time ./"$SCRIPT" "--filter" "$filter" |& sed 's/^/\t/g'
    if [ "$?" -ne 0 ]; then
        failures="$((failures + 1))"
    fi
    set -e
done

if [ "$failures" -ne 0 ]; then
    echo "$failures scripts failed"
    exit 1
else
    echo "All scripts passed"
fi

# ] <-- needed because of Argbash
